/*
 * This file is part of SpoutAPI.
 *
 * Copyright (c) 2011-2012, SpoutDev <http://www.spout.org/>
 * SpoutAPI is licensed under the SpoutDev License Version 1.
 *
 * SpoutAPI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * In addition, 180 days after any changes are published, you can use the
 * software, incorporating those changes, under the terms of the MIT license,
 * as described in the SpoutDev License Version 1.
 *
 * SpoutAPI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License,
 * the MIT license and the SpoutDev License Version 1 along with this program.
 * If not, see <http://www.gnu.org/licenses/> for the GNU Lesser General Public
 * License and see <http://www.spout.org/SpoutDevLicenseV1.txt> for the full license,
 * including the MIT license.
 */
package org.spout.api.generator.biome;

import org.spout.api.geo.World;
import org.spout.api.geo.cuboid.Chunk;
import org.spout.api.util.cuboid.CuboidShortBuffer;

/**
 * Abstract Biome Column Generator.
 */
public abstract class BiomeColumnGenerator extends BiomeGenerator {
	/**
	 * Register a new Biome Type to be generated by this generator. Only
	 * ColumnGeneratorBiome can be registered.
	 *
	 * @param biome
	 * @throws IllegalArgumentException if the biome isn't an isntance of
	 * ColumnGeneratorBiome
	 */
	@Override
	public void register(Biome biome) {
		if (!(biome instanceof ColumnGeneratorBiome)) {
			throw new IllegalArgumentException("Couldn't register biome: biome is not an instance of ColumnGeneratorBiome");
		}
		biomes.addBiome(biome);
	}

	@Override
	public BiomeManager generate(CuboidShortBuffer blockData, int chunkX, int chunkY, int chunkZ, World world) {
		final int x = chunkX << Chunk.BLOCKS.BITS;
		final int z = chunkZ << Chunk.BLOCKS.BITS;
		final Simple2DBiomeManager biomeManager = new Simple2DBiomeManager(chunkX, chunkY, chunkZ);
		byte[] biomeData = new byte[Chunk.BLOCKS.AREA];
		for (int dx = x; dx < x + Chunk.BLOCKS.SIZE; ++dx) {
			for (int dz = z; dz < z + Chunk.BLOCKS.SIZE; ++dz) {
				final Biome biome = biomes.getBiome(dx, dz, world.getSeed());
				if (biome instanceof ColumnGeneratorBiome) {
					((ColumnGeneratorBiome) biome).generateColumn(blockData, dx, chunkY, dz);
				}
				biomeData[(dz & Chunk.BLOCKS.MASK) << 4 | (dx & Chunk.BLOCKS.MASK)] = (byte) biome.getId();
			}
		}
		biomeManager.deserialize(biomeData);
		return biomeManager;
	}
}
